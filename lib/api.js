// Generated by CoffeeScript 1.6.3
(function() {
  var Gcalendar, clearInstance, crypto, instances, loadInstance,
    __slice = [].slice;

  crypto = require('crypto');

  Gcalendar = require('./gcalendar');

  instances = {};

  clearInstance = function() {
    var instance, k, _results;
    _results = [];
    for (k in instances) {
      instance = instances[k];
      if (new Date - instance.started > 60000) {
        _results.push(delete instances[k]);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  loadInstance = function(instanceId, callback) {
    if (Math.round(Math.random() * 200) === 100) {
      clearInstance();
    }
    if (!instances[instanceId]) {
      return callback(new Error('NOINSTANCE'));
    }
    return callback(null, instances[instanceId]);
  };

  exports.init = function(options, callback) {
    var gc, instanceId;
    if (callback == null) {
      callback = function() {};
    }
    instanceId = crypto.createHash('sha1').update(JSON.stringify(options)).digest('hex');
    gc = new Gcalendar(options);
    gc.started = new Date;
    instances[instanceId] = gc;
    return callback(null, instanceId);
  };

  exports.api = function() {
    var args, instanceId, query;
    instanceId = arguments[0], query = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    return loadInstance(instanceId, function(err, instance) {
      if (err != null) {
        return callback(err);
      }
      return instance.api(query).apply(instance, args);
    });
  };

  exports.generateAuthUrl = function(instanceId, callback) {
    if (callback == null) {
      callback = function() {};
    }
    return loadInstance(instanceId, function(err, instance) {
      if (err != null) {
        return callback(err);
      }
      return callback(null, instance.generateAuthUrl());
    });
  };

  ['getToken', 'refreshToken'].forEach(function(method) {
    return exports[method] = function() {
      var args, instanceId;
      instanceId = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return loadInstance(instanceId, function(err, instance) {
        return instance[method].apply(instance, args);
      });
    };
  });

}).call(this);
