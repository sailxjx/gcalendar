// Generated by CoffeeScript 1.6.3
(function() {
  var $client, Client, async, axon, req, rpc,
    __slice = [].slice;

  axon = require('axon');

  rpc = require('axon-rpc');

  async = require('async');

  req = axon.socket('req');

  $client = null;

  Client = (function() {
    Client.connect = function() {
      if ($client == null) {
        req.connect.apply(req, arguments);
        $client = new rpc.Client(req);
      }
      return Client;
    };

    function Client(options) {
      var _this = this;
      this.start = new Date;
      $client.call('init', options, function(err, instanceId) {
        return _this.instanceId = instanceId;
      });
    }

    Client.prototype.loadInstance = function(callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      if (this.instanceId != null) {
        return callback(null, this.instanceId);
      }
      return async.until(function() {
        return (_this.instanceId != null) || Date.now() - _this.start > 5000;
      }, function(next) {
        return setTimeout(next, 200);
      }, function(err) {
        if (_this.instanceId == null) {
          return callback(new Error('NOINSTANCE'));
        }
        return callback(err, _this.instanceId);
      });
    };

    Client.prototype.api = function(query) {
      var _api,
        _this = this;
      _api = function() {
        var args, callback;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (typeof args[args.length - 1] === 'function') {
          callback = args[args.length - 1];
        } else {
          callback = function() {};
        }
        return _this.loadInstance(function(err, instanceId) {
          if (err != null) {
            return callback(err);
          }
          args = ['api', instanceId, query].concat(args);
          return $client.call.apply($client, args);
        });
      };
      return _api;
    };

    Client.prototype.generateAuthUrl = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.loadInstance(function(err, instanceId) {
        if (err != null) {
          return callback(err);
        }
        return $client.call('generateAuthUrl', instanceId, callback);
      });
    };

    ['getToken', 'refreshToken'].forEach(function(method) {
      return Client.prototype[method] = function() {
        var args, callback;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (typeof args[args.length - 1] === 'function') {
          callback = args[args.length - 1];
        } else {
          callback = function() {};
        }
        return this.loadInstance(function(err, instanceId) {
          if (err != null) {
            return callback(err);
          }
          args = [method, instanceId].concat(args);
          return $client.call.apply($client, args);
        });
      };
    });

    return Client;

  })();

  module.exports = Client;

}).call(this);
