// Generated by CoffeeScript 1.6.3
(function() {
  var Gcalendar, OAuth2Client, gapi;

  gapi = require('googleapis');

  OAuth2Client = gapi.OAuth2Client;

  Gcalendar = (function() {
    function Gcalendar(options) {
      var access_token, client_id, client_secret, redirect_uri, refresh_token, _ref;
      this.options = options != null ? options : {};
      _ref = this.options, client_id = _ref.client_id, client_secret = _ref.client_secret, redirect_uri = _ref.redirect_uri, access_token = _ref.access_token, refresh_token = _ref.refresh_token;
      this.auth = new OAuth2Client(client_id, client_secret, redirect_uri);
      if ((access_token != null) && (refresh_token != null)) {
        this.auth.credentials = {
          access_token: access_token,
          refresh_token: refresh_token
        };
      }
    }

    Gcalendar.prototype.execute = function(request, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return request.withAuthClient(this.auth).execute(callback);
    };

    Gcalendar.prototype.api = function(query) {
      var _api, _arguments,
        _this = this;
      _api = {};
      _arguments = [];
      _api.execute = function(callback) {
        if (callback == null) {
          callback = function() {};
        }
        _this.getClient(function(err, client) {
          var steps, _method;
          if (err != null) {
            return callback(err);
          }
          _method = {};
          steps = query.split('.');
          steps.unshift('calendar');
          steps.every(function(prop) {
            return _method = _method[prop] || client[prop];
          });
          if (typeof _method !== 'function') {
            return callback(new Error("No Such Api! " + query));
          }
          return _this.execute(_method.apply(client, _arguments), callback);
        });
        return _api;
      };
      _api["arguments"] = function() {
        _arguments = arguments;
        return _api;
      };
      return _api;
    };

    Gcalendar.prototype.getClient = function(callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      if (this._client != null) {
        return callback(null, this._client);
      }
      return gapi.discover('calendar', 'v3').execute(function(err, client) {
        _this._client = client;
        return callback(err, client);
      });
    };

    Gcalendar.prototype.getAuth = function() {
      return this.auth;
    };

    Gcalendar.prototype.generateAuthUrl = function() {
      return this.auth.generateAuthUrl({
        access_type: 'offline',
        scope: 'https://www.googleapis.com/auth/calendar',
        approval_prompt: 'force'
      });
    };

    Gcalendar.prototype.getToken = function(code, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.auth.getToken(code, callback);
    };

    Gcalendar.prototype.refreshToken = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.auth.refreshAccessToken(callback);
    };

    return Gcalendar;

  })();

  module.exports = Gcalendar;

}).call(this);
